{"ast":null,"code":"import _slicedToArray from \"/Users/leratorabotapi/Downloads/Deploy/Task8/to-do/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState } from \"react\";\nexport var useInputValue = function useInputValue() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n\n  var _useState = useState(initialValue),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputValue = _useState2[0],\n      setInputValue = _useState2[1];\n\n  return {\n    inputValue: inputValue,\n    changeInput: function changeInput(event) {\n      return setInputValue(event.target.value);\n    },\n    clearInput: function clearInput() {\n      return setInputValue(\"\");\n    },\n    keyInput: function keyInput(event, callback) {\n      if (event.which === 13 || event.keyCode === 13) {\n        callback(inputValue);\n        return true;\n      }\n\n      return false;\n    }\n  };\n};\nexport var useTodos = function useTodos() {\n  var initialValue = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  var _useState3 = useState(initialValue),\n      _useState4 = _slicedToArray(_useState3, 2),\n      todos = _useState4[0],\n      setTodos = _useState4[1];\n\n  return {\n    todos: todos,\n    addTodo: function addTodo(text) {\n      if (text !== \"\") {\n        setTodos(todos.concat({\n          text: text,\n          checked: false\n        }));\n      }\n    },\n    checkTodo: function checkTodo(idx) {\n      setTodos(todos.map(function (todo, index) {\n        if (idx === index) {\n          todo.checked = !todo.checked;\n        }\n\n        return todo;\n      }));\n    },\n    removeTodo: function removeTodo(idx) {\n      setTodos(todos.filter(function (todo, index) {\n        return idx !== index;\n      }));\n    }\n  };\n};","map":{"version":3,"sources":["/Users/leratorabotapi/Downloads/Deploy/Task8/to-do/src/custom-hooks.js"],"names":["useState","useInputValue","initialValue","inputValue","setInputValue","changeInput","event","target","value","clearInput","keyInput","callback","which","keyCode","useTodos","todos","setTodos","addTodo","text","concat","checked","checkTodo","idx","map","todo","index","removeTodo","filter"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AAEA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,GAAuB;AAAA,MAAtBC,YAAsB,uEAAP,EAAO;;AAAA,kBACdF,QAAQ,CAACE,YAAD,CADM;AAAA;AAAA,MAC3CC,UAD2C;AAAA,MAC/BC,aAD+B;;AAGlD,SAAO;AACLD,IAAAA,UAAU,EAAVA,UADK;AAELE,IAAAA,WAAW,EAAE,qBAAAC,KAAK;AAAA,aAAIF,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAjB;AAAA,KAFb;AAGLC,IAAAA,UAAU,EAAE;AAAA,aAAML,aAAa,CAAC,EAAD,CAAnB;AAAA,KAHP;AAILM,IAAAA,QAAQ,EAAE,kBAACJ,KAAD,EAAQK,QAAR,EAAqB;AAC7B,UAAIL,KAAK,CAACM,KAAN,KAAgB,EAAhB,IAAsBN,KAAK,CAACO,OAAN,KAAkB,EAA5C,EAAgD;AAC9CF,QAAAA,QAAQ,CAACR,UAAD,CAAR;AACA,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD;AAXI,GAAP;AAaD,CAhBM;AAkBP,OAAO,IAAMW,QAAQ,GAAG,SAAXA,QAAW,GAAuB;AAAA,MAAtBZ,YAAsB,uEAAP,EAAO;;AAAA,mBACnBF,QAAQ,CAACE,YAAD,CADW;AAAA;AAAA,MACtCa,KADsC;AAAA,MAC/BC,QAD+B;;AAG7C,SAAO;AACLD,IAAAA,KAAK,EAALA,KADK;AAELE,IAAAA,OAAO,EAAE,iBAAAC,IAAI,EAAI;AACf,UAAIA,IAAI,KAAK,EAAb,EAAiB;AACfF,QAAAA,QAAQ,CACND,KAAK,CAACI,MAAN,CAAa;AACXD,UAAAA,IAAI,EAAJA,IADW;AAEXE,UAAAA,OAAO,EAAE;AAFE,SAAb,CADM,CAAR;AAMD;AACF,KAXI;AAYLC,IAAAA,SAAS,EAAE,mBAAAC,GAAG,EAAI;AAChBN,MAAAA,QAAQ,CACND,KAAK,CAACQ,GAAN,CAAU,UAACC,IAAD,EAAOC,KAAP,EAAiB;AACzB,YAAIH,GAAG,KAAKG,KAAZ,EAAmB;AACjBD,UAAAA,IAAI,CAACJ,OAAL,GAAe,CAACI,IAAI,CAACJ,OAArB;AACD;;AAED,eAAOI,IAAP;AACD,OAND,CADM,CAAR;AASD,KAtBI;AAuBLE,IAAAA,UAAU,EAAE,oBAAAJ,GAAG,EAAI;AACjBN,MAAAA,QAAQ,CAACD,KAAK,CAACY,MAAN,CAAa,UAACH,IAAD,EAAOC,KAAP;AAAA,eAAiBH,GAAG,KAAKG,KAAzB;AAAA,OAAb,CAAD,CAAR;AACD;AAzBI,GAAP;AA2BD,CA9BM","sourcesContent":["import { useState } from \"react\";\n\nexport const useInputValue = (initialValue = \"\") => {\n  const [inputValue, setInputValue] = useState(initialValue);\n\n  return {\n    inputValue,\n    changeInput: event => setInputValue(event.target.value),\n    clearInput: () => setInputValue(\"\"),\n    keyInput: (event, callback) => {\n      if (event.which === 13 || event.keyCode === 13) {\n        callback(inputValue);\n        return true;\n      }\n\n      return false;\n    }\n  };\n};\n\nexport const useTodos = (initialValue = []) => {\n  const [todos, setTodos] = useState(initialValue);\n\n  return {\n    todos,\n    addTodo: text => {\n      if (text !== \"\") {\n        setTodos(\n          todos.concat({\n            text,\n            checked: false\n          })\n        );\n      }\n    },\n    checkTodo: idx => {\n      setTodos(\n        todos.map((todo, index) => {\n          if (idx === index) {\n            todo.checked = !todo.checked;\n          }\n\n          return todo;\n        })\n      );\n    },\n    removeTodo: idx => {\n      setTodos(todos.filter((todo, index) => idx !== index));\n    }\n  };\n};\n"]},"metadata":{},"sourceType":"module"}